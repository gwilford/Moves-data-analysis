#!/opt/local/bin/perl -w

use strict;
use JSON;
use Data::Dumper;
use Finance::QIF;
use Time::Local;
use Getopt::Std;

my $kmtomile = 0.621371192;
my @wdays = qw(sun mon tue wed thu fri sat);

sub usage {
	die "Usage: $0 [ -q ] [ -s|e YYYYMMDD ] [ -x|y HHMMSS ] [ -d days_regex ]\n" .
	    "       -q: output QIF instead of daily summary\n" .
	    "       -s: ignore dates before YYYYMMDD\n" .
	    "       -e: ignore dates after YYYYMMDD\n" .
	    "       -x: ignore activities starting before HHMMSS on any day\n" .
	    "       -y: ignore activities ending after HHMMSS on any day\n" .
	    "       -d: ignore days of the week not matching <days_regex>\n";
}

our($opt_q, $opt_s, $opt_e, $opt_d, $opt_x, $opt_y);
getopts('qs:e:d:x:y:') || usage();

# set the IFS - not needed as the JSON has no field separators
#my $fs = $/;
#undef $/;
# suck in the JSON on stdin
my $json = <STDIN>;
#$/ = $fs;

# clean up rogue periods from Moves Export data
$json =~ s/\[,\{/\[\{/; # at start
$json =~ s/\},\]/\}\]/; # at end

# translate the JSON into a multi-level perl structure
my $hash = decode_json($json);

my $out = Finance::QIF->new(file => ">-",);
my $header = "Type:Bank";
if ($opt_q) {
	# Init the QIF on stdout
	$out->header($header);
}

# Parse the Moves data structure
# Pull out and sum-up the daily transport distances
my $days = $hash->{export};

#print Dumper(@$days);
while (my $day = shift @$days) {
	#print Dumper($day);
	my $total = 0;
	# trp time range in HHMMSS
	my $start = 999999;
	my $end = 0;

	#print "$date\n";
	while (my $segment = shift @{$day->{segments}} ) {
		# Is this a move entry?
		next unless ($segment->{type} eq 'move');

		#print $segment->{startTime} . "\n";
		# YYYYMMDDTHHMMSSZ
		#$segment->{endTime};
		while (my $activity = shift @{$segment->{activities}}) {
			# Is this a transport entry?
			next unless ($activity->{activity} eq "trp");

			# earliest start - latest end
			$activity->{startTime} =~ /\d{6}T(\d{6})Z/;
			next unless (!$opt_x || $1 ge $opt_x);
			$start = $1 if ($1 < $start);

			$activity->{endTime} =~ /\d{6}T(\d{6})Z/;
			next unless (!$opt_y || $1 le $opt_y);
			$end = $1 if ($1 > $end);

			$total += $activity->{distance};
		}
	}

	# any transport today?
	next unless ($total);
	# within date range?
	next unless (!$opt_s || $day->{date} ge $opt_s);
	next unless (!$opt_e || $day->{date} le $opt_e);

	#my $movesdate = $day->{date};
	#die "'$movesdate'" unless ($movesdate =~ /^(\d{4})(\d{2})(\d{2})$/);
	my $datestart = $day->{date} . $start;
	die "'$datestart'" unless ($datestart =~ /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/);
	my $qifdate = "$3/$2/$1";
	my $wday = (localtime(timelocal(0,0,0,$3,$2-1,$1)))[6];
	#my $date = localtime(timelocal(0,0,0,$3,$2-1,$1));
	my $date = localtime(timelocal($6,$5,$4,$3,$2-1,$1));

	# matches day(s) of week?
	next unless (!$opt_d || $wdays[$wday] =~ /$opt_d/i);

	my $km = $total / 1000;
	my $miles = $km * $kmtomile;

	if (!$opt_q) {
		#printf "Daily total for %s-%d: %.2fMiles (%.2fKm)\n", $date, $wday, $miles, $km;
		printf "%s (-%06d): %6.2f miles (%6.2f Km)\n", $date, $end, $miles, $km;
		next;
	}

	# create a QIF transaction
	my $record = {
		header => $header,
		date => $qifdate,
		transaction => sprintf("%.2f", $miles),
		#total => $miles,
		#status => ,
		payee => 'Drive',
		memo => 'From Moves Export data',
		category => 'Automotive:Fuel:Miles',
	};
	# write out the QIF transaction
	$out->write($record);

}
# close the QIF
$out->close if ($opt_q);
